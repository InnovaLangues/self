<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * appDevUrlMatcher
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevUrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);
        $context = $this->context;
        $request = $this->request;

        if (0 === strpos($pathinfo, '/_')) {
            // _wdt
            if (0 === strpos($pathinfo, '/_wdt') && preg_match('#^/_wdt/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => '_wdt')), array(  '_controller' => 'web_profiler.controller.profiler:toolbarAction'));
            }

            if (0 === strpos($pathinfo, '/_profiler')) {
                // _profiler_home
                if (rtrim($pathinfo, '/') === '/_profiler') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', '_profiler_home');
                    }

                    return array(  '_controller' => 'web_profiler.controller.profiler:homeAction',  '_route' => '_profiler_home');
                }

                if (0 === strpos($pathinfo, '/_profiler/search')) {
                    // _profiler_search
                    if ($pathinfo === '/_profiler/search') {
                        return array(  '_controller' => 'web_profiler.controller.profiler:searchAction',  '_route' => '_profiler_search');
                    }

                    // _profiler_search_bar
                    if ($pathinfo === '/_profiler/search_bar') {
                        return array(  '_controller' => 'web_profiler.controller.profiler:searchBarAction',  '_route' => '_profiler_search_bar');
                    }
                }

                // _profiler_purge
                if ($pathinfo === '/_profiler/purge') {
                    return array(  '_controller' => 'web_profiler.controller.profiler:purgeAction',  '_route' => '_profiler_purge');
                }

                // _profiler_info
                if (0 === strpos($pathinfo, '/_profiler/info') && preg_match('#^/_profiler/info/(?P<about>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_info')), array(  '_controller' => 'web_profiler.controller.profiler:infoAction'));
                }

                // _profiler_phpinfo
                if ($pathinfo === '/_profiler/phpinfo') {
                    return array(  '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  '_route' => '_profiler_phpinfo');
                }

                // _profiler_search_results
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/search/results$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_search_results')), array(  '_controller' => 'web_profiler.controller.profiler:searchResultsAction'));
                }

                // _profiler
                if (preg_match('#^/_profiler/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler')), array(  '_controller' => 'web_profiler.controller.profiler:panelAction'));
                }

                // _profiler_router
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/router$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_router')), array(  '_controller' => 'web_profiler.controller.router:panelAction'));
                }

                // _profiler_exception
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_exception')), array(  '_controller' => 'web_profiler.controller.exception:showAction'));
                }

                // _profiler_exception_css
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception\\.css$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_exception_css')), array(  '_controller' => 'web_profiler.controller.exception:cssAction'));
                }
            }

            if (0 === strpos($pathinfo, '/_configurator')) {
                // _configurator_home
                if (rtrim($pathinfo, '/') === '/_configurator') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', '_configurator_home');
                    }

                    return array(  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::checkAction',  '_route' => '_configurator_home');
                }

                // _configurator_step
                if (0 === strpos($pathinfo, '/_configurator/step') && preg_match('#^/_configurator/step/(?P<index>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_configurator_step')), array(  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::stepAction'));
                }

                // _configurator_final
                if ($pathinfo === '/_configurator/final') {
                    return array(  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::finalAction',  '_route' => '_configurator_final');
                }
            }
        }

        if (0 === strpos($pathinfo, '/admin/users')) {
            // admin_user
            if (rtrim($pathinfo, '/') === '/admin/users') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_admin_user;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'admin_user');
                }

                return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\AdminUserController::indexAction',  '_route' => 'admin_user');
            }
            not_admin_user:

            // admin_user_show
            if (preg_match('#^/admin/users/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_admin_user_show;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'admin_user_show')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\AdminUserController::showAction'));
            }
            not_admin_user_show:

            if (0 === strpos($pathinfo, '/admin/users/delete-')) {
                if (0 === strpos($pathinfo, '/admin/users/delete-t')) {
                    // delete-test-trace
                    if (0 === strpos($pathinfo, '/admin/users/delete-test-trace/user') && preg_match('#^/admin/users/delete\\-test\\-trace/user/(?P<userId>[^/]++)/test/(?P<testId>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_deletetesttrace;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete-test-trace')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\AdminUserController::deleteTestTraceAction'));
                    }
                    not_deletetesttrace:

                    // delete-task-trace
                    if (0 === strpos($pathinfo, '/admin/users/delete-task-trace/user') && preg_match('#^/admin/users/delete\\-task\\-trace/user/(?P<userId>[^/]++)/test/(?P<testId>[^/]++)/questionnaire/(?P<questionnaireId>[^/]++)$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_deletetasktrace;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete-task-trace')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\AdminUserController::deleteTaskTraceAction'));
                    }
                    not_deletetasktrace:
                }

                // delete-user
                if (0 === strpos($pathinfo, '/admin/users/delete-user') && preg_match('#^/admin/users/delete\\-user/(?P<userId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_deleteuser;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete-user')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\AdminUserController::deleteUserAction'));
                }
                not_deleteuser:
            }
        }

        // show_start
        if (rtrim($pathinfo, '/') === '') {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_show_start;
            }

            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'show_start');
            }

            return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\AnonymousController::startAction',  '_route' => 'show_start');
        }
        not_show_start:

        if (0 === strpos($pathinfo, '/admin')) {
            if (0 === strpos($pathinfo, '/admin/e')) {
                if (0 === strpos($pathinfo, '/admin/editor')) {
                    if (0 === strpos($pathinfo, '/admin/editor/questionnaires')) {
                        if (0 === strpos($pathinfo, '/admin/editor/questionnaires/create-')) {
                            if (0 === strpos($pathinfo, '/admin/editor/questionnaires/create-l')) {
                                // editor_questionnaire_create-liste
                                if ($pathinfo === '/admin/editor/questionnaires/create-liste') {
                                    if ($this->context->getMethod() != 'PUT') {
                                        $allow[] = 'PUT';
                                        goto not_editor_questionnaire_createliste;
                                    }

                                    return array(  '_controller' => 'innova_editor_eec:createListeAction',  '_route' => 'editor_questionnaire_create-liste');
                                }
                                not_editor_questionnaire_createliste:

                                // editor_questionnaire_create-lacunes
                                if ($pathinfo === '/admin/editor/questionnaires/create-lacunes') {
                                    if ($this->context->getMethod() != 'PUT') {
                                        $allow[] = 'PUT';
                                        goto not_editor_questionnaire_createlacunes;
                                    }

                                    return array(  '_controller' => 'innova_editor_eec:createLacunesAction',  '_route' => 'editor_questionnaire_create-lacunes');
                                }
                                not_editor_questionnaire_createlacunes:
                            }

                            // editor_questionnaire_create-clue
                            if ($pathinfo === '/admin/editor/questionnaires/create-clue') {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_editor_questionnaire_createclue;
                                }

                                return array(  '_controller' => 'innova_editor_eec:createClueAction',  '_route' => 'editor_questionnaire_create-clue');
                            }
                            not_editor_questionnaire_createclue:
                        }

                        // editor_questionnaire_set-clue-type
                        if ($pathinfo === '/admin/editor/questionnaires/set-clue-type') {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_editor_questionnaire_setcluetype;
                            }

                            return array(  '_controller' => 'innova_editor_eec:setClueTypeAction',  '_route' => 'editor_questionnaire_set-clue-type');
                        }
                        not_editor_questionnaire_setcluetype:

                        // editor_questionnaire_create-syllable
                        if ($pathinfo === '/admin/editor/questionnaires/create-syllable') {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_editor_questionnaire_createsyllable;
                            }

                            return array(  '_controller' => 'innova_editor_eec:createSyllableAction',  '_route' => 'editor_questionnaire_create-syllable');
                        }
                        not_editor_questionnaire_createsyllable:

                        // editor_questionnaire_set-display
                        if ($pathinfo === '/admin/editor/questionnaires/set-display') {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_editor_questionnaire_setdisplay;
                            }

                            return array(  '_controller' => 'innova_editor_eec:setDisplayAction',  '_route' => 'editor_questionnaire_set-display');
                        }
                        not_editor_questionnaire_setdisplay:

                        if (0 === strpos($pathinfo, '/admin/editor/questionnaires/add-distractor')) {
                            // editor_questionnaire_add-distractor
                            if ($pathinfo === '/admin/editor/questionnaires/add-distractor') {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_editor_questionnaire_adddistractor;
                                }

                                return array(  '_controller' => 'innova_editor_eec:addDistractorAction',  '_route' => 'editor_questionnaire_add-distractor');
                            }
                            not_editor_questionnaire_adddistractor:

                            // editor_questionnaire_add-distractor-mult
                            if ($pathinfo === '/admin/editor/questionnaires/add-distractor-mult') {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_editor_questionnaire_adddistractormult;
                                }

                                return array(  '_controller' => 'innova_editor_eec:addDistractorMultAction',  '_route' => 'editor_questionnaire_add-distractor-mult');
                            }
                            not_editor_questionnaire_adddistractormult:
                        }

                        if (0 === strpos($pathinfo, '/admin/editor/questionnaires/e')) {
                            // editor_questionnaire_edit-distractor
                            if ($pathinfo === '/admin/editor/questionnaires/edit-distractor') {
                                if ($this->context->getMethod() != 'PUT') {
                                    $allow[] = 'PUT';
                                    goto not_editor_questionnaire_editdistractor;
                                }

                                return array(  '_controller' => 'innova_editor_eec:editDistractorAction',  '_route' => 'editor_questionnaire_edit-distractor');
                            }
                            not_editor_questionnaire_editdistractor:

                            if (0 === strpos($pathinfo, '/admin/editor/questionnaires/ecc_')) {
                                // editor_questionnaire_get_answers
                                if ($pathinfo === '/admin/editor/questionnaires/ecc_get_answer') {
                                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                        $allow = array_merge($allow, array('GET', 'HEAD'));
                                        goto not_editor_questionnaire_get_answers;
                                    }

                                    return array(  '_controller' => 'innova_editor_eec:getAnswersAction',  '_route' => 'editor_questionnaire_get_answers');
                                }
                                not_editor_questionnaire_get_answers:

                                // ecc_toggle_answer
                                if ($pathinfo === '/admin/editor/questionnaires/ecc_toggle_answer') {
                                    if ($this->context->getMethod() != 'PUT') {
                                        $allow[] = 'PUT';
                                        goto not_ecc_toggle_answer;
                                    }

                                    return array(  '_controller' => 'innova_editor_eec:toggleRightAnswerAction',  '_route' => 'ecc_toggle_answer');
                                }
                                not_ecc_toggle_answer:
                            }
                        }
                    }

                    // set-listening-limit
                    if ($pathinfo === '/admin/editor/set-listening-limit') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_setlisteninglimit;
                        }

                        return array(  '_controller' => 'innova_editor_media:setListeningLimitAction',  '_route' => 'set-listening-limit');
                    }
                    not_setlisteninglimit:

                    // get-media-info
                    if ($pathinfo === '/admin/editor/get-media-info') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_getmediainfo;
                        }

                        return array(  '_controller' => 'innova_editor_media:getMediaInfoAction',  '_route' => 'get-media-info');
                    }
                    not_getmediainfo:

                    // editor_questionnaire_update-media
                    if ($pathinfo === '/admin/editor/editor_questionnaire_update-media') {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_editor_questionnaire_updatemedia;
                        }

                        return array(  '_controller' => 'innova_editor_media:updateMediaAction',  '_route' => 'editor_questionnaire_update-media');
                    }
                    not_editor_questionnaire_updatemedia:

                    if (0 === strpos($pathinfo, '/admin/editor/questionnaires')) {
                        // editor_questionnaire_create-media
                        if ($pathinfo === '/admin/editor/questionnaires/create-media') {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_editor_questionnaire_createmedia;
                            }

                            return array(  '_controller' => 'innova_editor_media:createMediaAction',  '_route' => 'editor_questionnaire_create-media');
                        }
                        not_editor_questionnaire_createmedia:

                        // editor_questionnaire_unlink-media
                        if ($pathinfo === '/admin/editor/questionnaires/unlink-media') {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_editor_questionnaire_unlinkmedia;
                            }

                            return array(  '_controller' => 'innova_editor_media:unlinkMediaAction',  '_route' => 'editor_questionnaire_unlink-media');
                        }
                        not_editor_questionnaire_unlinkmedia:
                    }

                    // save-order-test-questionnaire
                    if ($pathinfo === '/admin/editor/order-test-questionnaire') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_saveordertestquestionnaire;
                        }

                        return array(  '_controller' => 'innova_editor_orderquestionnaire:saveOrderAction',  '_route' => 'save-order-test-questionnaire');
                    }
                    not_saveordertestquestionnaire:

                    // editor_add_task_to_test
                    if ($pathinfo === '/admin/editor/editor_add_task_to_test') {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_editor_add_task_to_test;
                        }

                        return array(  '_controller' => 'innova_editor_orderquestionnaire:addTaskToTestAction',  '_route' => 'editor_add_task_to_test');
                    }
                    not_editor_add_task_to_test:

                    // delete-task
                    if ($pathinfo === '/admin/editor/delete-task') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_deletetask;
                        }

                        return array(  '_controller' => 'innova_editor_orderquestionnaire:deleteTaskAction',  '_route' => 'delete-task');
                    }
                    not_deletetask:

                    if (0 === strpos($pathinfo, '/admin/editor/questionnaires')) {
                        // editor_questionnaire_toggle_right_anwser
                        if ($pathinfo === '/admin/editor/questionnaires/toggle_right_answer') {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_editor_questionnaire_toggle_right_anwser;
                            }

                            return array(  '_controller' => 'innova_editor_proposition:toggleRightAnswserAction',  '_route' => 'editor_questionnaire_toggle_right_anwser');
                        }
                        not_editor_questionnaire_toggle_right_anwser:

                        if (0 === strpos($pathinfo, '/admin/editor/questionnaires/set-')) {
                            if (0 === strpos($pathinfo, '/admin/editor/questionnaires/set-text-t')) {
                                // editor_questionnaire_set-text-title
                                if ($pathinfo === '/admin/editor/questionnaires/set-text-title') {
                                    if ($this->context->getMethod() != 'POST') {
                                        $allow[] = 'POST';
                                        goto not_editor_questionnaire_settexttitle;
                                    }

                                    return array(  '_controller' => 'innova_editor_questionnaire:setTextTitleAction',  '_route' => 'editor_questionnaire_set-text-title');
                                }
                                not_editor_questionnaire_settexttitle:

                                // set-text-type
                                if ($pathinfo === '/admin/editor/questionnaires/set-text-type') {
                                    if ($this->context->getMethod() != 'PUT') {
                                        $allow[] = 'PUT';
                                        goto not_settexttype;
                                    }

                                    return array(  '_controller' => 'innova_editor_questionnaire:setTextTypeAction',  '_route' => 'set-text-type');
                                }
                                not_settexttype:
                            }

                            // set-identity-field
                            if ($pathinfo === '/admin/editor/questionnaires/set-identity-field') {
                                if ($this->context->getMethod() != 'POST') {
                                    $allow[] = 'POST';
                                    goto not_setidentityfield;
                                }

                                return array(  '_controller' => 'innova_editor_questionnaire:setIdentityFieldAction',  '_route' => 'set-identity-field');
                            }
                            not_setidentityfield:
                        }

                        // editor_questionnaire_create-subquestion
                        if ($pathinfo === '/admin/editor/questionnaires/create-subquestion') {
                            if ($this->context->getMethod() != 'PUT') {
                                $allow[] = 'PUT';
                                goto not_editor_questionnaire_createsubquestion;
                            }

                            return array(  '_controller' => 'innova_editor_subquestion:createSubquestionAction',  '_route' => 'editor_questionnaire_create-subquestion');
                        }
                        not_editor_questionnaire_createsubquestion:

                        // editor_questionnaire_delete_subquestion
                        if ($pathinfo === '/admin/editor/questionnaires/delete-subquestion') {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_editor_questionnaire_delete_subquestion;
                            }

                            return array(  '_controller' => 'innova_editor_subquestion:deleteSubquestionAction',  '_route' => 'editor_questionnaire_delete_subquestion');
                        }
                        not_editor_questionnaire_delete_subquestion:
                    }

                    if (0 === strpos($pathinfo, '/admin/editor/subquestion')) {
                        // editor_subquestion-identity-form
                        if ($pathinfo === '/admin/editor/subquestion/display-identity-form') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_editor_subquestionidentityform;
                            }

                            return array(  '_controller' => 'innova_editor_subquestion:displayIdentityFormAction',  '_route' => 'editor_subquestion-identity-form');
                        }
                        not_editor_subquestionidentityform:

                        // set-subquestion-identity-field
                        if ($pathinfo === '/admin/editor/subquestion/set-identity-field') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_setsubquestionidentityfield;
                            }

                            return array(  '_controller' => 'innova_editor_subquestion:setIdentityFieldAction',  '_route' => 'set-subquestion-identity-field');
                        }
                        not_setsubquestionidentityfield:
                    }

                    if (0 === strpos($pathinfo, '/admin/editor/questionnaires')) {
                        // editor_questionnaires_show
                        if ($pathinfo === '/admin/editor/questionnaires') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_editor_questionnaires_show;
                            }

                            return array(  '_controller' => 'innova_editor_task:listQuestionnairesAction',  '_route' => 'editor_questionnaires_show');
                        }
                        not_editor_questionnaires_show:

                        // editor_questionnaires_by_language_show
                        if (0 === strpos($pathinfo, '/admin/editor/questionnaires/language') && preg_match('#^/admin/editor/questionnaires/language/(?P<languageId>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_editor_questionnaires_by_language_show;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_questionnaires_by_language_show')), array(  '_controller' => 'innova_editor_task:listQuestionnairesByLanguageAction'));
                        }
                        not_editor_questionnaires_by_language_show:
                    }

                    if (0 === strpos($pathinfo, '/admin/editor/test')) {
                        // editor_test_questionnaires_show
                        if (preg_match('#^/admin/editor/test/(?P<testId>[^/]++)/questionnaires$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_editor_test_questionnaires_show;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_test_questionnaires_show')), array(  '_controller' => 'innova_editor_task:listTestQuestionnairesAction'));
                        }
                        not_editor_test_questionnaires_show:

                        // editor_test_questionnaires_potentials
                        if (preg_match('#^/admin/editor/test/(?P<testId>[^/]++)/potentials$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_editor_test_questionnaires_potentials;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_test_questionnaires_potentials')), array(  '_controller' => 'innova_editor_task:getPotentialQuestionnaires'));
                        }
                        not_editor_test_questionnaires_potentials:
                    }

                    if (0 === strpos($pathinfo, '/admin/editor/questionnaire')) {
                        // editor_questionnaire_show
                        if (preg_match('#^/admin/editor/questionnaire/(?P<questionnaireId>[^/]++)(?:/(?P<testId>[^/]++))?$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_editor_questionnaire_show;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_questionnaire_show')), array(  'testId' => NULL,  '_controller' => 'innova_editor_task:showAction'));
                        }
                        not_editor_questionnaire_show:

                        // editor_questionnaire_create
                        if ($pathinfo === '/admin/editor/questionnaire/create') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_editor_questionnaire_create;
                            }

                            return array(  '_controller' => 'innova_editor_task:createQuestionnaireAction',  '_route' => 'editor_questionnaire_create');
                        }
                        not_editor_questionnaire_create:
                    }

                    // delete-task-list
                    if ($pathinfo === '/admin/editor/delete-task-list') {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_deletetasklist;
                        }

                        return array(  '_controller' => 'innova_editor_task:deleteTaskListAction',  '_route' => 'delete-task-list');
                    }
                    not_deletetasklist:

                    if (0 === strpos($pathinfo, '/admin/editor/test')) {
                        if (0 === strpos($pathinfo, '/admin/editor/tests')) {
                            // editor_tests_show
                            if ($pathinfo === '/admin/editor/tests') {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_editor_tests_show;
                                }

                                return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Editor\\TestController::listTestsAction',  '_route' => 'editor_tests_show');
                            }
                            not_editor_tests_show:

                            // editor_tests_by_language_show
                            if (0 === strpos($pathinfo, '/admin/editor/tests/language') && preg_match('#^/admin/editor/tests/language/(?P<languageId>[^/]++)$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_editor_tests_by_language_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_tests_by_language_show')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Editor\\TestController::listTestsByLanguageAction'));
                            }
                            not_editor_tests_by_language_show:
                        }

                        // editor_test_create_form
                        if ($pathinfo === '/admin/editor/test/newform') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_editor_test_create_form;
                            }

                            return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Editor\\TestController::createTestFormAction',  '_route' => 'editor_test_create_form');
                        }
                        not_editor_test_create_form:

                        // editor_test_create
                        if ($pathinfo === '/admin/editor/test/create') {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_editor_test_create;
                            }

                            return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Editor\\TestController::createTestAction',  '_route' => 'editor_test_create');
                        }
                        not_editor_test_create:

                        // editor_test_edit_form
                        if (preg_match('#^/admin/editor/test/(?P<testId>[^/]++)/editform$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_editor_test_edit_form;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_test_edit_form')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Editor\\TestController::editTestFormAction'));
                        }
                        not_editor_test_edit_form:

                        // editor_test_edit
                        if (preg_match('#^/admin/editor/test/(?P<testId>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'POST') {
                                $allow[] = 'POST';
                                goto not_editor_test_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_test_edit')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Editor\\TestController::editTestAction'));
                        }
                        not_editor_test_edit:

                        // editor_test_delete
                        if (preg_match('#^/admin/editor/test/(?P<testId>[^/]++)/delete$#s', $pathinfo, $matches)) {
                            if ($this->context->getMethod() != 'DELETE') {
                                $allow[] = 'DELETE';
                                goto not_editor_test_delete;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'editor_test_delete')), array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Editor\\TestController::deleteTestAction'));
                        }
                        not_editor_test_delete:
                    }

                    // editor_questionnaire_upload-file
                    if ($pathinfo === '/admin/editor/questionnaires/upload-file') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_editor_questionnaire_uploadfile;
                        }

                        return array(  '_controller' => 'innova_editor_upload:uploadFileAction',  '_route' => 'editor_questionnaire_upload-file');
                    }
                    not_editor_questionnaire_uploadfile:

                    // editor_crop_image
                    if ($pathinfo === '/admin/editor/editor/crop-image') {
                        if ($this->context->getMethod() != 'PUT') {
                            $allow[] = 'PUT';
                            goto not_editor_crop_image;
                        }

                        return array(  '_controller' => 'innova_editor_upload:cropImageAction',  '_route' => 'editor_crop_image');
                    }
                    not_editor_crop_image:
                }

                // export
                if ($pathinfo === '/admin/export') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_export;
                    }

                    return array(  '_controller' => 'innova_export:indexAction',  '_route' => 'export');
                }
                not_export:
            }

            // get-file
            if (0 === strpos($pathinfo, '/admin/test') && preg_match('#^/admin/test/(?P<testId>[^/]++)/file/(?P<filename>[^/]++)/(?P<mode>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_getfile;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'get-file')), array(  '_controller' => 'innova_export:getFileAction'));
            }
            not_getfile:

            if (0 === strpos($pathinfo, '/admin/csv-export')) {
                // csv-export
                if (0 === strpos($pathinfo, '/admin/csv-export/export/test') && preg_match('#^/admin/csv\\-export/export/test/(?P<testId>[^/]++)/(?P<tia>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_csvexport;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'csv-export')), array(  '_controller' => 'innova_export:exportCsvAction'));
                }
                not_csvexport:

                // csv-export-show
                if (0 === strpos($pathinfo, '/admin/csv-export/show/test') && preg_match('#^/admin/csv\\-export/show/test/(?P<testId>[^/]++)/(?P<tia>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_csvexportshow;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'csv-export-show')), array(  '_controller' => 'innova_export:showCsvAction'));
                }
                not_csvexportshow:
            }

            if (0 === strpos($pathinfo, '/admin/pdf-export')) {
                // pdf-export
                if (0 === strpos($pathinfo, '/admin/pdf-export/test') && preg_match('#^/admin/pdf\\-export/test/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'PUT') {
                        $allow[] = 'PUT';
                        goto not_pdfexport;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pdf-export')), array(  '_controller' => 'innova_export:exportPdfAction'));
                }
                not_pdfexport:

                // pdf-export-show
                if (0 === strpos($pathinfo, '/admin/pdf-export/show/test') && preg_match('#^/admin/pdf\\-export/show/test/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_pdfexportshow;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pdf-export-show')), array(  '_controller' => 'innova_export:showPdfAction'));
                }
                not_pdfexportshow:
            }
        }

        // locale_change
        if (0 === strpos($pathinfo, '/locale/change') && preg_match('#^/locale/change/(?P<_locale>[^/]++)$#s', $pathinfo, $matches)) {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_locale_change;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'locale_change')), array(  '_controller' => 'innova_locale_controller:changeLocale'));
        }
        not_locale_change:

        if (0 === strpos($pathinfo, '/ajax')) {
            // sessionContextListenNumber
            if ($pathinfo === '/ajax/session-context-listen-number') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_sessionContextListenNumber;
                }

                return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Player\\AjaxController::sessionContextListenNumberAction',  '_route' => 'sessionContextListenNumber');
            }
            not_sessionContextListenNumber:

            // incrementeSessionContextListenNumber
            if ($pathinfo === '/ajax/increment-session-context-listen-number') {
                if ($this->context->getMethod() != 'PUT') {
                    $allow[] = 'PUT';
                    goto not_incrementeSessionContextListenNumber;
                }

                return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Player\\AjaxController::incrementeSessionContextListenNumberAction',  '_route' => 'incrementeSessionContextListenNumber');
            }
            not_incrementeSessionContextListenNumber:

            // resetSessionContextListenNumber
            if ($pathinfo === '/ajax/reset-session-context-listen-number') {
                if ($this->context->getMethod() != 'PUT') {
                    $allow[] = 'PUT';
                    goto not_resetSessionContextListenNumber;
                }

                return array(  '_controller' => 'Innova\\SelfBundle\\Controller\\Player\\AjaxController::resetSessionContextListenNumberAction',  '_route' => 'resetSessionContextListenNumber');
            }
            not_resetSessionContextListenNumber:
        }

        // get-remaining-listening
        if ($pathinfo === '/get-remaining-listening') {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_getremaininglistening;
            }

            return array(  '_controller' => 'innova_mediaclick:getRemainingListeningAction',  '_route' => 'get-remaining-listening');
        }
        not_getremaininglistening:

        if (0 === strpos($pathinfo, '/i')) {
            // increment-media-clicks
            if ($pathinfo === '/increment-media-clicks') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_incrementmediaclicks;
                }

                return array(  '_controller' => 'innova_mediaclick:incrementMediaClicksAction',  '_route' => 'increment-media-clicks');
            }
            not_incrementmediaclicks:

            // is-media-playable
            if ($pathinfo === '/is-media-playable') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_ismediaplayable;
                }

                return array(  '_controller' => 'innova_mediaclick:isMediaPlayableAction',  '_route' => 'is-media-playable');
            }
            not_ismediaplayable:
        }

        // test_start
        if (0 === strpos($pathinfo, '/student/test/start') && preg_match('#^/student/test/start/(?P<id>[^/]++)/(?P<displayHelp>[^/]++)/?$#s', $pathinfo, $matches)) {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_test_start;
            }

            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'test_start');
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'test_start')), array(  '_controller' => 'innova_player:startAction'));
        }
        not_test_start:

        // test_end
        if (0 === strpos($pathinfo, '/test_end') && preg_match('#^/test_end/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_test_end;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'test_end')), array(  '_controller' => 'innova_player:endAction'));
        }
        not_test_end:

        // questionnaire_pick
        if (0 === strpos($pathinfo, '/admin/test') && preg_match('#^/admin/test/(?P<testId>[^/]++)/questionnaire/(?P<questionnaireId>[^/]++)$#s', $pathinfo, $matches)) {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_questionnaire_pick;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'questionnaire_pick')), array(  '_controller' => 'innova_player:pickAQuestionnaireAction'));
        }
        not_questionnaire_pick:

        // trace_submit
        if ($pathinfo === '/trace_submit') {
            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                goto not_trace_submit;
            }

            return array(  '_controller' => 'innova_player_trace:saveTraceAction',  '_route' => 'trace_submit');
        }
        not_trace_submit:

        // display_difficulty
        if ($pathinfo === '/display_difficulty') {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_display_difficulty;
            }

            return array(  '_controller' => 'innova_player_trace:displayDifficultyFormAction',  '_route' => 'display_difficulty');
        }
        not_display_difficulty:

        // trace_setDifficulty
        if ($pathinfo === '/trace_setDifficulty') {
            if ($this->context->getMethod() != 'POST') {
                $allow[] = 'POST';
                goto not_trace_setDifficulty;
            }

            return array(  '_controller' => 'innova_player_trace:traceSetDifficultyAction',  '_route' => 'trace_setDifficulty');
        }
        not_trace_setDifficulty:

        // show_tests
        if (rtrim($pathinfo, '/') === '/student') {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_show_tests;
            }

            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'show_tests');
            }

            return array(  '_controller' => 'innova_test:showTestsAction',  '_route' => 'show_tests');
        }
        not_show_tests:

        // test_favorite_toggle
        if ($pathinfo === '/favorite/toggle') {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_test_favorite_toggle;
            }

            return array(  '_controller' => 'innova_test:toggleFavoriteAction',  '_route' => 'test_favorite_toggle');
        }
        not_test_favorite_toggle:

        if (0 === strpos($pathinfo, '/log')) {
            if (0 === strpos($pathinfo, '/login')) {
                // fos_user_security_login
                if ($pathinfo === '/login') {
                    return array(  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  '_route' => 'fos_user_security_login');
                }

                // fos_user_security_check
                if ($pathinfo === '/login_check') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_security_check;
                    }

                    return array(  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  '_route' => 'fos_user_security_check');
                }
                not_fos_user_security_check:
            }

            // fos_user_security_logout
            if ($pathinfo === '/logout') {
                return array(  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  '_route' => 'fos_user_security_logout');
            }
        }

        if (0 === strpos($pathinfo, '/profile')) {
            // fos_user_profile_show
            if (rtrim($pathinfo, '/') === '/profile') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_fos_user_profile_show;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'fos_user_profile_show');
                }

                return array(  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  '_route' => 'fos_user_profile_show');
            }
            not_fos_user_profile_show:

            // fos_user_profile_edit
            if ($pathinfo === '/profile/edit') {
                return array(  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  '_route' => 'fos_user_profile_edit');
            }
        }

        if (0 === strpos($pathinfo, '/re')) {
            if (0 === strpos($pathinfo, '/register')) {
                // fos_user_registration_register
                if (rtrim($pathinfo, '/') === '/register') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fos_user_registration_register');
                    }

                    return array(  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::registerAction',  '_route' => 'fos_user_registration_register');
                }

                if (0 === strpos($pathinfo, '/register/c')) {
                    // fos_user_registration_check_email
                    if ($pathinfo === '/register/check-email') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_fos_user_registration_check_email;
                        }

                        return array(  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  '_route' => 'fos_user_registration_check_email');
                    }
                    not_fos_user_registration_check_email:

                    if (0 === strpos($pathinfo, '/register/confirm')) {
                        // fos_user_registration_confirm
                        if (preg_match('#^/register/confirm/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirm;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_registration_confirm')), array(  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmAction'));
                        }
                        not_fos_user_registration_confirm:

                        // fos_user_registration_confirmed
                        if ($pathinfo === '/register/confirmed') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirmed;
                            }

                            return array(  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmedAction',  '_route' => 'fos_user_registration_confirmed');
                        }
                        not_fos_user_registration_confirmed:
                    }
                }
            }

            if (0 === strpos($pathinfo, '/resetting')) {
                // fos_user_resetting_request
                if ($pathinfo === '/resetting/request') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_request;
                    }

                    return array(  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  '_route' => 'fos_user_resetting_request');
                }
                not_fos_user_resetting_request:

                // fos_user_resetting_send_email
                if ($pathinfo === '/resetting/send-email') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_resetting_send_email;
                    }

                    return array(  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  '_route' => 'fos_user_resetting_send_email');
                }
                not_fos_user_resetting_send_email:

                // fos_user_resetting_check_email
                if ($pathinfo === '/resetting/check-email') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_check_email;
                    }

                    return array(  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  '_route' => 'fos_user_resetting_check_email');
                }
                not_fos_user_resetting_check_email:

                // fos_user_resetting_reset
                if (0 === strpos($pathinfo, '/resetting/reset') && preg_match('#^/resetting/reset/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_resetting_reset;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_resetting_reset')), array(  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction'));
                }
                not_fos_user_resetting_reset:
            }
        }

        // fos_user_change_password
        if ($pathinfo === '/profile/change-password') {
            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                goto not_fos_user_change_password;
            }

            return array(  '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  '_route' => 'fos_user_change_password');
        }
        not_fos_user_change_password:

        // fos_js_routing_js
        if (0 === strpos($pathinfo, '/js/routing') && preg_match('#^/js/routing(?:\\.(?P<_format>js|json))?$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_js_routing_js')), array(  '_controller' => 'fos_js_routing.controller:indexAction',  '_format' => 'js'));
        }

        if (0 === strpos($pathinfo, '/upload/thumbnail')) {
            // _imagine_app4
            if (preg_match('#^/upload/thumbnail/(?P<filter>[A-z0-9_\\-]*)/(?P<path>.+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not__imagine_app4;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => '_imagine_app4')), array(  '_controller' => 'imagine.controller:filter',  'filter' => 'app4'));
            }
            not__imagine_app4:

            // _imagine_app3
            if (preg_match('#^/upload/thumbnail/(?P<filter>[A-z0-9_\\-]*)/(?P<path>.+)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not__imagine_app3;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => '_imagine_app3')), array(  '_controller' => 'imagine.controller:filter',  'filter' => 'app3'));
            }
            not__imagine_app3:
        }

        // bazinga_jstranslation_js
        if (0 === strpos($pathinfo, '/translations') && preg_match('#^/translations(?:/(?P<domain>[\\w]+)(?:\\.(?P<_format>js|json))?)?$#s', $pathinfo, $matches)) {
            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'HEAD'));
                goto not_bazinga_jstranslation_js;
            }

            return $this->mergeDefaults(array_replace($matches, array('_route' => 'bazinga_jstranslation_js')), array(  '_controller' => 'bazinga.jstranslation.controller:getTranslationsAction',  'domain' => 'messages',  '_format' => 'js'));
        }
        not_bazinga_jstranslation_js:

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
